import json
import sqlite3
from model.test_plan import TestPlan 

class TestPlanDAO:
    def __init__(self, db_name):
        # connect to database
        self.con = sqlite3.connect(db_name)
        self.cur = self.con.cursor()

        self.cur.row_factory = lambda cursor, row: row[0]
        self.construct_test_plan_uuids_set()

    def construct_test_plan_uuids_set(self):
        test_plan_uuids_select_statement = "SELECT uuid FROM test_plan"
        res = self.cur.execute(test_plan_uuids_select_statement)
        self.valid_test_plan_uuids = set(res.fetchall())

    def get_all(self):
        self.cur.row_factory = None 
        # statement to get all fields of all entries from test plan table
        get_test_plan_statement = "SELECT * FROM test_plan"

        try:
            # execute the statement
            res = self.cur.execute(get_test_plan_statement)
            # get the result
            test_plan_list = res.fetchall()
            # atomic operation
            self.con.commit()
    
            test_plan_obj_list = []
    
            for test_plan in test_plan_list:
                test_plan_obj_list.append(TestPlan(test_plan[0], test_plan[1]))
    
            return test_plan_obj_list
        except:
            return None

    # get test plan by a specific uuid
    def get_test_plan_by_id(self, uuid: str):
        self.cur.row_factory = None 
        # create a tuple to pass into the parameter
        data = (uuid,)
        # statement to query all fields of the vulnerability with specific uuid
        get_test_plan_statement = "SELECT * FROM test_plan WHERE uuid=?"

        try:
            # execute the statement
            res = self.cur.execute(get_test_plan_statement, data)
            # obtain the result
            test_plan = res.fetchall()
            # atomic operation
            self.con.commit()
    
            test_plan_obj = TestPlan(test_plan[0], test_plan[1])
    
            return test_plan_obj
        except:
            return None

    # add test plan to database
    def add_test_plan(self, name: str):
        test_plan_uuid = str(uuid.uuid4())

        data = (test_plan_uuid, name)
        add_test_plan_statement = "INSERT INTO test_plan VALUES(?, ?)"

        try:
            res = self.cur.execute(add_test_plan_statement, data)
            print(res.fetchall())
            self.con.commit()

            self.test_plan_uuid = test_plan_uuid

            self.valid_test_plan_uuids.add(test_plan_uuid)

            return test_plan_uuid
        except:
            return None

    # remove test plan from database
    def remove_test_plan_by_id(self, uuid: str) -> bool:
        self.cur.row_factory = None 
        # create a tuple to pass into the parameter
        data = (uuid,)
        # statement to query all fields of the vulnerability with specific uuid
        delete_test_plan_statement = "DELETE * FROM test_plan WHERE uuid=?"
        try:
            # execute the statement
            res = self.cur.execute(delete_test_plan_statement, data)
            # obtain the result
            res.fetchall()
            # atomic operation
            self.con.commit()

            return True
        except:
            return False

if __name__ == "__main__":
    tpDAO = TestPlanDAO("../application.db")
    print(tpDAO.get_all()[0].uuid)
