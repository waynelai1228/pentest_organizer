## List of Objects
- Project (engagement)
- Contract (scope)
- Threat Model
- Test Plan
- Test Plan Item
- Test Plan Item Note
- Vulnerability

## Relationship between objects

### Project
contains
- contract
- threat model
- test plan

### Test Plan
contains
- test plan items

### Test Plan Item
contains
- vulnerability
- test plan item notes

## Database schema

### Vulnerability

uuid (primary key): for identifying a specific vulnerability
name (unique): human identifiable name for the vulnerability
description: what does the vulnerability mean?
resources: where to learn more about this vulnerability
categories: grouping of similar vulnerabilities

```
CREATE TABLE vulnerabilities (
uuid TEXT PRIMARY KEY,
name TEXT NOT NULL,
description TEXT NOT NULL,
resources TEXT NOT NULL,
categories TEXT NOT NULL,
UNIQUE(name)
);
```

### Test Plan

```
CREATE TABLE test_plan (
uuid TEXT PRIMARY KEY,
name TEXT
);
```

### Test Plan Item

uuid (primary key): identification for the row in a test plan
vulnerability_uuid (foreign key): the vulnerability to be tested
progress: not started, in progress, or completed
test_plan_uuid (foreign key): identify which test plan this item belongs to

```
CREATE TABLE test_plan_item (
uuid TEXT PRIMARY KEY,
vulnerability_uuid TEXT,
progress TEXT,
test_plan_uuid TEXT,
FOREIGN KEY(vulnerability_uuid) REFERENCES vulnerabilities(uuid) ON DELETE CASCADE ON UPDATE NO ACTION,
FOREIGN KEY(test_plan_uuid) REFERENCES test_plan(uuid) ON DELETE CASCADE ON UPDATE NO ACTION
);
```

### Test Plan Item Note

uuid (primary key): identifys the note
test_plan_item_uuid (foreign key): which test plan item this note belongs to
note: content of the note


```
CREATE TABLE test_plan_item_notes(
uuid TEXT PRIMARY KEY,
test_plan_item_uuid TEXT,
note TEXT,
FOREIGN KEY(test_plan_item_uuid) REFERENCES test_plan_item(uuid) ON DELETE CASCADE ON UPDATE NO ACTION
);
```
