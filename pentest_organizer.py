import sqlite3
import uuid
from vulnerability import Vulnerability
from test_plan_item import Progress
from test_plan_item import TestPlanItem

class PentestOrganizer:
    def __init__(self):
        print("init")
        # connect to database
        self.con = sqlite3.connect("application.db")
        self.cur = self.con.cursor()

    def create_new_test_plan(self, name: str):
        print("create new test plan")

        test_plan_uuid = str(uuid.uuid4())

        data = (test_plan_uuid, name)
        add_test_plan_statement = "INSERT INTO test_plan VALUES(?, ?)"
        res = self.cur.execute(add_test_plan_statement, data)
        print(res.fetchall())
        self.con.commit()

        return test_plan_uuid

    def add_new_vulnerability(self, name: str, description: str, resources, categories):
        print("add new vulnerability")

        # TODO: add necessary access control

        vuln_uuid = str(uuid.uuid4())

        data = (vuln_uuid, name, description, str(resources), str(categories))
        add_vuln_statement = "INSERT INTO vulnerabilities VALUES(?, ?, ?, ?, ?)"
        res = self.cur.execute(add_vuln_statement, data)
        print(res.fetchall())
        self.con.commit()

        return vuln_uuid

    def add_test_plan_item(self, vulnerability_uuid: str, progress: Progress, test_plan_uuid: str):
        print("add test plan item")

        # TODO: add necessary access control

        data = (str(uuid.uuid4()), vulnerability_uuid, str(progress), test_plan_uuid)
        add_item_statement = "INSERT INTO test_plan_item VALUES(?, ?, ?, ?)"
        res = self.cur.execute(add_item_statement, data)
        print(res.fetchall())
        self.con.commit()

if __name__ == "__main__":
    po = PentestOrganizer()
    user_in = ""
    test_plan_uuid = ""
    while user_in != "quit":
        user_in = input("Enter a command ('help' to see options): ")
        if user_in == "help":
            print("help - display help message")
            print("create test plan - add a test plan")
            print("add vuln - add vulnerability")
            print("add item - add test plan item")
            print("quit - exit the program")
        elif user_in == "create test plan":
            test_plan_name = input("enter test plan name: ")
            test_plan_uuid = po.create_new_test_plan(test_plan_name)
            print("test plan " + test_plan_name + " created")
        elif user_in == "add vuln":
            vuln_name = input("enter vulnerability name: ")
            vuln_description = input("enter description: ")
            vuln_resources = input("enter resources (comma separated list): ")
            vuln_categories = input("enter categories (comma separated list): ")
            vuln_resources = vuln_resources.split(',')
            vuln_categories = vuln_categories.split(',')
            po.add_new_vulnerability(vuln_name, vuln_description, vuln_resources, vuln_categories)
            print("vulnerability " + vuln_name + " added")
        elif user_in == "add item":
            print("in add item")
        elif user_in == "quit":
            print("exiting program...")
        else:
            print("error")
