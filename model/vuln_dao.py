import json
from model.vulnerability import Vulnerability

# TODO: make all functions return vulnerability object instead of raw results

class VulnerabilityDAO:
    def __init__(self):
        # connect to database
        self.con = sqlite3.connect("application.db")
        self.cur = self.con.cursor()

        self.cur.row_factory = lambda cursor, row: row[0]
        self.construct_vuln_uuids_set()

    def construct_vuln_uuids_set(self):
        # statement to get the list of uuids
        vuln_uuids_select_statement = "SELECT uuid FROM vulnerabilities"
        res = self.cur.execute(vuln_uuids_select_statement)
        self.valid_vuln_uuids = set(res.fetchall())

    # return all vulnerabilities stored in the database
    def get_all(self):
        self.cur.row_factory = None 
        # statement to get all fields of all entries from vulnerabilities table
        get_vuln_statement = "SELECT * FROM vulnerabilities"
        # execute the statement
        res = self.cur.execute(get_vuln_statement)
        # get the result
        vulns_list = res.fetchall()
        # atomic operation
        self.con.commit()

        return vulns_list

    # get vulnerability by a specific uuid
    def get_vuln_by_id(self, uuid: str):
        self.cur.row_factory = None 
        # create a tuple to pass into the parameter
        data = (uuid,)
        # statement to query all fields of the vulnerability with specific uuid
        get_vuln_statement = "SELECT * FROM vulnerabilities WHERE uuid=?"
        # execute the statement
        res = self.cur.execute(get_vuln_statement, data)
        # obtain the result
        vuln = res.fetchall()
        # atomic operation
        self.con.commit()

        return vuln

    # add vulnerability to database
    def add_vuln(self, name: str, description: str, resources, categories):
        vuln_uuid = str(uuid.uuid4())

        # construct data tuple for the parameters
        data = (vuln_uuid, name, description, str(resources), str(categories))
        # statement to add vulnerability into table
        add_vuln_statement = "INSERT INTO vulnerabilities VALUES(?, ?, ?, ?, ?)"
        # execute the statement
        res = self.cur.execute(add_vuln_statement, data)
        # atomic operation
        self.con.commit()

        self.valid_vuln_uuids.add(vuln_uuid)

        return vuln_uuid

    # remove vulnerability from database
    def remove_vuln_by_id(self, uuid: str):
        self.cur.row_factory = None 
        # create a tuple to pass into the parameter
        data = (uuid,)
        # statement to delete all fields of the vulnerability with specific uuid
        delete_vuln_statement = "DELETE * FROM vulnerabilities WHERE uuid=?"
        # execute the statement
        res = self.cur.execute(delete_vuln_statement, data)
        # obtain the result
        vuln = res.fetchall()
        # atomic operation
        self.con.commit()

        return vuln
