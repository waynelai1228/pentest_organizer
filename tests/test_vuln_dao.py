import string
import random
import unittest
from model.vuln_dao import VulnerabilityDAO
from model.vulnerability import Vulnerability

class VulnDAOTest(unittest.TestCase):
    _test_add_vuln_raw_data_uuid = ""
    _test_add_vuln_obj_uuid = ""

    @classmethod
    def setUpClass(cls):
        cls._vuln_dao = VulnerabilityDAO("tests/test_application.db")

    @classmethod
    def tearDownClass(cls):
        cls._vuln_dao.remove_vuln_by_id(cls._test_add_vuln_raw_data_uuid)
        cls._vuln_dao.remove_vuln_by_id(cls._test_add_vuln_obj_uuid)
        print("bye")

    def test_get_all(self):
        vulns_obj_list = VulnDAOTest._vuln_dao.get_all()
        self.assertTrue(len(vulns_obj_list) == 25)
        self.assertTrue(vulns_obj_list[0].name == "SQL Injection")

    def test_get_vuln_by_id(self):
        res = ''.join(random.choices(string.ascii_uppercase + string.digits + string.ascii_lowercase, k=12))
        vuln_uuid = VulnDAOTest._vuln_dao.add_vuln(res, "a vulnerability added for testing purpose", ['bunch of resources', 'lol'], ['test', 'delete after'])
        vuln_obj = VulnDAOTest._vuln_dao.get_vuln_by_id(vuln_uuid)
        self.assertTrue(vuln_obj.name == res)
        VulnDAOTest._vuln_dao.remove_vuln_by_id(vuln_uuid)

    def test_add_vuln_raw_data(self):
        vuln_uuid = VulnDAOTest._vuln_dao.add_vuln("test add vuln raw vulnerability", "a vulnerability added for testing purpose", ['bunch of resources', 'lol'], ['test', 'delete after'])
        self.assertTrue(vuln_uuid is not None)
        VulnDAOTest._test_add_vuln_raw_data_uuid = vuln_uuid

    def test_add_vuln_obj(self):
        vuln_obj = Vulnerability("test add vuln obj vulnerability", "a vulnerability added for testing purpose", ['bunch of resources', 'very fetch'], ['test', 'delete after'])
        vuln_uuid = VulnDAOTest._vuln_dao.add_vuln_obj(vuln_obj)
        self.assertTrue(vuln_uuid == vuln_obj.uuid)
        VulnDAOTest._test_add_vuln_obj_uuid = vuln_uuid

    def test_remove_vuln_by_id(self):
        vulns_obj_list = VulnDAOTest._vuln_dao.get_all()
        self.assertTrue(len(vulns_obj_list) == 25)

        res = ''.join(random.choices(string.ascii_uppercase + string.digits + string.ascii_lowercase, k=12))
        vuln_uuid = VulnDAOTest._vuln_dao.add_vuln(res, "a vulnerability added for testing purpose", ['bunch of resources', 'lol'], ['test', 'delete after'])

        vulns_obj_list = VulnDAOTest._vuln_dao.get_all()
        self.assertTrue(len(vulns_obj_list) == 26)

        vuln_obj = VulnDAOTest._vuln_dao.get_vuln_by_id(vuln_uuid)
        self.assertTrue(vuln_obj.name == res)
        VulnDAOTest._vuln_dao.remove_vuln_by_id(vuln_uuid)

        vulns_obj_list = VulnDAOTest._vuln_dao.get_all()
        self.assertTrue(len(vulns_obj_list) == 25)

        vuln_obj = VulnDAOTest._vuln_dao.get_vuln_by_id(vuln_uuid)
        self.assertTrue(vuln_obj == None)

if __name__ == '__main__':
    unittest.main()
