[
    {
        "name": "SQL Injection",
        "description": " SQL injection (SQLi) is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. This can allow an attacker to view data that they are not normally able to retrieve. This might include data that belongs to other users, or any other data that the application can access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behavior. ",
        "resources": [
            "https://portswigger.net/web-security/sql-injection"
        ],
        "categories": [
            "SQL",
            "Web",
            "Database",
            "Injection"
        ]
    },
    {
        "name": "Cross-Site Scripting (XSS)",
        "description": "Cross-site scripting (also known as XSS) is a web security vulnerability that allows an attacker to compromise the interactions that users have with a vulnerable application. It allows an attacker to circumvent the same origin policy, which is designed to segregate different websites from each other. Cross-site scripting vulnerabilities normally allow an attacker to masquerade as a victim user, to carry out any actions that the user is able to perform, and to access any of the user's data. If the victim user has privileged access within the application, then the attacker might be able to gain full control over all of the application's functionality and data. ",
        "resources": [
            "https://portswigger.net/web-security/cross-site-scripting"
        ],
        "categories": [
            "Web",
            "JavaScript",
            "Client-Side"
        ]
    },
    {
        "name": "Cross-Site Request Forgery (CSRF)",
        "description": "Cross-site request forgery (also known as CSRF) is a web security vulnerability that allows an attacker to induce users to perform actions that they do not intend to perform. It allows an attacker to partly circumvent the same origin policy, which is designed to prevent different websites from interfering with each other.",
        "resources": [
            "https://portswigger.net/web-security/csrf"
        ],
        "categories": [
            "Web",
            "Request",
            "Client-Side"
        ]
    },
    {
        "name": "Clickjacking",
        "description": "Clickjacking is an interface-based attack in which a user is tricked into clicking on actionable content on a hidden website by clicking on some other content in a decoy website.",
        "resources": [
            "https://portswigger.net/web-security/clickjacking"
        ],
        "categories": [
            "Web",
            "UI"
        ]
    },
    {
        "name": "Cross Origin Resource Sharing (CORS)",
        "description": "Cross-origin resource sharing (CORS) is a browser mechanism which enables controlled access to resources located outside of a given domain. It extends and adds flexibility to the same-origin policy (SOP). However, it also provides potential for cross-domain attacks, if a website's CORS policy is poorly configured and implemented. CORS is not a protection against cross-origin attacks such as cross-site request forgery (CSRF).",
        "resources": [
            "https://portswigger.net/web-security/cors"
        ],
        "categories": [
            "Web",
            "Cross-Domain",
            "XSS"
        ]
    },
    {
        "name": "XML External Entity (XXE) Injection",
        "description": "XML external entity injection (also known as XXE) is a web security vulnerability that allows an attacker to interfere with an application's processing of XML data. It often allows an attacker to view files on the application server filesystem, and to interact with any back-end or external systems that the application itself can access.",
        "resources": [
            "https://portswigger.net/web-security/xxe"
        ],
        "categories": [
            "Web",
            "XML",
            "Injection"
        ]
    },
    {
        "name": "Server-Side Request Forgery (SSRF)",
        "description": "Server-side request forgery is a web security vulnerability that allows an attacker to cause the server-side application to make requests to an unintended location.",
        "resources": [
            "https://portswigger.net/web-security/ssrf"
        ],
        "categories": [
            "Web",
            "Server-Side"
        ]
    },
    {
        "name": "HTTP Request Smuggling",
        "description": "HTTP request smuggling is a technique for interfering with the way a web site processes sequences of HTTP requests that are received from one or more users. Request smuggling vulnerabilities are often critical in nature, allowing an attacker to bypass security controls, gain unauthorized access to sensitive data, and directly compromise other application users.",
        "resources": [
            "https://portswigger.net/web-security/request-smuggling"
        ],
        "categories": [
            "Web",
            "Request",
            "Server-Side"
        ]
    },
    {
        "name": "OS Command Injection",
        "description": "OS command injection is also known as shell injection. It allows an attacker to execute operating system (OS) commands on the server that is running an application, and typically fully compromise the application and its data. Often, an attacker can leverage an OS command injection vulnerability to compromise other parts of the hosting infrastructure, and exploit trust relationships to pivot the attack to other systems within the organization.",
        "resources": [
            "https://portswigger.net/web-security/os-command-injection"
        ],
        "categories": [
            "Web",
            "OS",
            "Injection",
            "Server-Side"
        ]
    },
    {
        "name": "Server-Side Template Injection",
        "description": "Server-side template injection is when an attacker is able to use native template syntax to inject a malicious payload into a template, which is then executed server-side.",
        "resources": [
            "https://portswigger.net/web-security/server-side-template-injection"
        ],
        "categories": [
            "Web",
            "Server-Side",
            "Template",
            "Injection"
        ]
    },
    {
        "name": "Path Traversal",
        "description": "Path traversal is also known as directory traversal. These vulnerabilities enable an attacker to read arbitrary files on the server that is running an application.",
        "resources": [
            "https://portswigger.net/web-security/file-path-traversal"
        ],
        "categories": [
            "Web",
            "OS",
            "Directory"
        ]
    },
    {
        "name": "Access Control",
        "description": "Broken access control vulnerabilities exist when a user can access resources or perform actions that they are not supposed to be able to.",
        "resources": [
            "https://portswigger.net/web-security/access-control"
        ],
        "categories": [
            "Web",
            "Access",
            "Privilege Escalation"
        ]
    },
    {
        "name": "WebSockets",
        "description": "WebSockets are widely used in modern web applications. They are initiated over HTTP and provide long-lived connections with asynchronous communication in both directions.",
        "resources": [
            "https://portswigger.net/web-security/websockets"
        ],
        "categories": [
            "Web",
            "WebSocket"
        ]
    },
    {
        "name": "Web Cache Poisoning",
        "description": "Web cache poisoning is an advanced technique whereby an attacker exploits the behavior of a web server and cache so that a harmful HTTP response is served to other users.",
        "resources": [
            "https://portswigger.net/web-security/web-cache-poisoning"
        ],
        "categories": [
            "Web",
            "Cache",
            "Request"
        ]
    },
    {
        "name": "Insecure Deserialization",
        "description": "Insecure deserialization is when user-controllable data is deserialized by a website. This potentially enables an attacker to manipulate serialized objects in order to pass harmful data into the application code.",
        "resources": [
            "https://portswigger.net/web-security/deserialization"
        ],
        "categories": [
            "Web",
            "Serialization"
        ]
    },
    {
        "name": "Information Disclosure",
        "description": "Information disclosure, also known as information leakage, is when a website unintentionally reveals sensitive information to its users.",
        "resources": [
            "https://portswigger.net/web-security/information-disclosure"
        ],
        "categories": [
            "Web",
            "Information"
        ]
    },
    {
        "name": "Business Logic Vulnerabilities",
        "description": "Business logic vulnerabilities are flaws in the design and implementation of an application that allow an attacker to elicit unintended behavior. This potentially enables attackers to manipulate legitimate functionality to achieve a malicious goal. These flaws are generally the result of failing to anticipate unusual application states that may occur and, consequently, failing to handle them safely.",
        "resources": [
            "https://portswigger.net/web-security/logic-flaws"
        ],
        "categories": [
            "Web",
            "Logic",
            "Unexpected States"
        ]
    },
    {
        "name": "File Upload Vulnerabilities",
        "description": "File upload vulnerabilities are when a web server allows users to upload files to its filesystem without sufficiently validating things like their name, type, contents, or size. Failing to properly enforce restrictions on these could mean that even a basic image upload function can be used to upload arbitrary and potentially dangerous files instead. This could even include server-side script files that enable remote code execution.",
        "resources": [
            "https://portswigger.net/web-security/file-upload"
        ],
        "categories": [
            "Web",
            "File",
            "Upload",
            "OS",
            "Directory",
            "Server-Side"
        ]
    },
    {
        "name": "Prototype Pollution",
        "description": "Prototype pollution is a JavaScript vulnerability that enables an attacker to add arbitrary properties to global object prototypes, which may then be inherited by user-defined objects.",
        "resources": [
            "https://portswigger.net/web-security/prototype-pollution"
        ],
        "categories": [
            "Web",
            "JavaScript",
            "Client-Side",
            "Prototype"
        ]
    },
    {
        "name": "Race Conditions",
        "description": "Race conditions are a common type of vulnerability closely related to business logic flaws. They occur when websites process requests concurrently without adequate safeguards. This can lead to multiple distinct threads interacting with the same data at the same time, resulting in a \"collision\" that causes unintended behavior in the application. A race condition attack uses carefully timed requests to cause intentional collisions and exploit this unintended behavior for malicious purposes.",
        "resources": [
            "https://portswigger.net/web-security/race-conditions"
        ],
        "categories": [
            "Web",
            "Logic",
            "Timing"
        ]
    },
    {
        "name": "NoSQL Injection",
        "description": "NoSQL injection is a vulnerability where an attacker is able to interfere with the queries that an application makes to a NoSQL database.",
        "resources": [
            "https://portswigger.net/web-security/nosql-injection"
        ],
        "categories": [
            "Web",
            "NoSQL",
            "Database",
            "Injection"
        ]
    },
    {
        "name": "Web LLM Vulnerabilities",
        "description": "Organizations are rushing to integrate Large Language Models (LLMs) in order to improve their online customer experience. This exposes them to web LLM attacks that take advantage of the model's access to data, APIs, or user information that an attacker cannot access directly.",
        "resources": [
            "https://portswigger.net/web-security/llm-attacks"
        ],
        "categories": [
            "Web",
            "LLM"
        ]
    }
]