import asyncio
import sqlite3
import uuid
from model.vulnerability import Vulnerability
from model.test_plan_item import Progress
from model.test_plan_item import TestPlanItem
from pprint import pprint

_EMPTY_UUID = "00000000-0000-0000-0000-000000000000"

class PentestOrganizer:
    def __init__(self):
        print("init")
        # connect to database
        self.con = sqlite3.connect("application.db", check_same_thread=False)
        self.cur = self.con.cursor()
        self.test_plan_uuid = _EMPTY_UUID

        # TODO: asynchronously construct a map of valid vulnerabilities and test plan uuid
        self.cur.row_factory = lambda cursor, row: row[0]
        self.construct_test_plan_uuids_set()
        self.construct_vuln_uuids_set()

    def construct_test_plan_uuids_set(self):
        test_plan_uuids_select_statement = "SELECT uuid FROM test_plan"
        res = self.cur.execute(test_plan_uuids_select_statement)
        self.valid_test_plan_uuids = set(res.fetchall())
    
    def construct_vuln_uuids_set(self):
        vuln_uuids_select_statement = "SELECT uuid FROM vulnerabilities"
        res = self.cur.execute(vuln_uuids_select_statement)
        self.valid_vuln_uuids = set(res.fetchall())

    def is_valid_test_plan_uuid(self, uuid: str):
        return uuid in self.valid_test_plan_uuids

    def is_valid_vuln_uuid(self, uuid: str):
        return uuid in self.valid_vuln_uuids

    def create_new_test_plan(self, name: str):
        print("create new test plan")

        test_plan_uuid = str(uuid.uuid4())

        data = (test_plan_uuid, name)
        add_test_plan_statement = "INSERT INTO test_plan VALUES(?, ?)"
        res = self.cur.execute(add_test_plan_statement, data)
        print(res.fetchall())
        self.con.commit()

        self.test_plan_uuid = test_plan_uuid

        self.valid_test_plan_uuids.add(test_plan_uuid)

        return test_plan_uuid

    def select_test_plan(self, test_plan_uuid: str):
        # checks if the uuid provided is valid uuid
        if not self.is_valid_test_plan_uuid(test_plan_uuid):
            print("error: invalid uuid")
            return

        # set the uuid
        self.test_plan_uuid = test_plan_uuid

    def add_new_vulnerability(self, name: str, description: str, resources, categories):
        print("add new vulnerability")

        vuln_uuid = str(uuid.uuid4())

        data = (vuln_uuid, name, description, str(resources), str(categories))
        add_vuln_statement = "INSERT INTO vulnerabilities VALUES(?, ?, ?, ?, ?)"
        res = self.cur.execute(add_vuln_statement, data)
        print(res.fetchall())
        self.con.commit()

        self.valid_vuln_uuids.add(vuln_uuid)

        return vuln_uuid

    def add_test_plan_item(self, vulnerability_uuid: str, progress: Progress):
        print("add test plan item")

        if not self.is_valid_test_plan_uuid(self.test_plan_uuid):
            print("error: no valid test plan uuid selected")
            return

        data = (str(uuid.uuid4()), vulnerability_uuid, str(progress), self.test_plan_uuid)
        add_item_statement = "INSERT INTO test_plan_item VALUES(?, ?, ?, ?)"
        res = self.cur.execute(add_item_statement, data)
        print(res.fetchall())
        self.con.commit()

    def get_test_plans(self):
        print("get test plans")
        self.cur.row_factory = None 
        get_test_plan_statement = "SELECT * FROM test_plan"
        res = self.cur.execute(get_test_plan_statement)
        test_plans_list = res.fetchall()
        self.con.commit()

        return test_plans_list

    def get_test_plan_items(self):
        print("get test plans")
        if not self.is_valid_test_plan_uuid(self.test_plan_uuid):
            print("error invalid test plan uuid")
            return

        self.cur.row_factory = None 
        data = (self.test_plan_uuid, )
        get_test_plan_item_statement = "SELECT test_plan_item.uuid, test_plan.name, vulnerabilities.name, progress FROM test_plan_item, test_plan, vulnerabilities WHERE test_plan_item.test_plan_uuid = test_plan.uuid and test_plan_item.vulnerability_uuid=vulnerabilities.uuid and test_plan_item.test_plan_uuid=?"
        res = self.cur.execute(get_test_plan_item_statement, data)
        test_plan_items_list = res.fetchall()
        self.con.commit()

        return test_plan_items_list

    def get_vulnerabilities(self):
        print("get vulnerabilities")
        self.cur.row_factory = None 
        get_vuln_statement = "SELECT * FROM vulnerabilities"
        res = self.cur.execute(get_vuln_statement)
        vulns_list = res.fetchall()
        self.con.commit()

        return vulns_list


if __name__ == "__main__":
    po = PentestOrganizer()
    user_in = ""
    test_plan_uuid = ""
    while user_in != "quit":
        user_in = input("(" + po.test_plan_uuid + ") " + "Enter a command ('help' to see options): ")
        if user_in == "help":
            print("help - display help message")
            print("create test plan - add a test plan")
            print("select test plan - select a test plan to work on")
            print("add vuln - add vulnerability")
            print("add item - add test plan item")
            print("display test plans - display test plans")
            print("display items - display items in the test plan")
            print("display vulns - display vulnerabilities")
            print("quit - exit the program")
        elif user_in == "create test plan":
            test_plan_name = input("enter test plan name: ")
            test_plan_uuid = po.create_new_test_plan(test_plan_name)
            print("test plan " + test_plan_name + " created")
        elif user_in == "select test plan":
            test_plan_uuid = input("enter the uuid of test plan: ")
            po.select_test_plan(test_plan_uuid)
        elif user_in == "add vuln":
            vuln_name = input("enter vulnerability name: ")
            vuln_description = input("enter description: ")
            vuln_resources = input("enter resources (comma separated list): ")
            vuln_categories = input("enter categories (comma separated list): ")
            vuln_resources = vuln_resources.split(',')
            vuln_categories = vuln_categories.split(',')
            po.add_new_vulnerability(vuln_name, vuln_description, vuln_resources, vuln_categories)
            print("vulnerability " + vuln_name + " added")
        elif user_in == "add item":
            print("in add item")
            
            if po.test_plan_uuid == _EMPTY_UUID:
                print("error: select a test plan first")
                continue

            print("uuid exists yeah")

            # Get vulnerability uuid from user
            vuln_uuid = input("enter vulnerability uuid: ")
            if not po.is_valid_vuln_uuid(vuln_uuid):
                print("invalid vuln uuid")
                continue

            progress_str = input("enter test plan item progress (NOT_STARTED, IN_PROGRESS, COMPLETED): ")
            try:
                progress = Progress.__members__[progress_str]
            except KeyError:
                print("not a valid progress value")
                continue

            print("ready to add test plan item")
            po.add_test_plan_item(vuln_uuid, progress)
        elif user_in == "display test plans":
            pprint(po.get_test_plans())
        elif user_in == "display items":
            pprint(po.get_test_plan_items())
        elif user_in == "display vulns":
            pprint(po.get_vulnerabilities())
        elif user_in == "quit":
            print("exiting program...")
        else:
            print("error")
